{"version":3,"sources":["../../src/controller/foodtruck.js"],"names":["config","db","api","post","req","res","newFoodTruck","name","body","foodtype","avgcost","geometry","coordinates","save","err","send","json","message","get","find","foodtrucks","findById","params","id","foodtruck","put","delete","remove","_id","newReview","title","text","review","reviews","push"],"mappings":"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","file":"foodtruck.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport FoodTruck from '../model/foodtruck';  //to be changed according the the proper model in the Model Folder\nimport Review from '../model/review';\nimport bodyParser from 'body-parser';\n\nexport default({ config, db }) => {\n\tlet api = Router();\n\n\t//CRUD Create, Read, Update Delete\n\n\t//CREATE API ROUTE -- '/v1/foodtruck/add'\n\t//this route allows us to create data and post it to the database\n\t//change this according to the model\n\tapi.post('/add', (req, res) => {\n\t\tlet newFoodTruck = new FoodTruck();\n\t\tnewFoodTruck.name = req.body.name;\n\t\tnewFoodTruck.foodtype = req.body.foodtype;\n\t\tnewFoodTruck.avgcost = req.body.avgcost;\n\t\tnewFoodTruck.geometry.coordinates = req.body.geometry.coordinates;\n\t\tnewFoodTruck.save(err => {\n\t\t\tif(err) {\n\t\t\t\tres.send(err);\n\t\t\t}\n\t\t\tres.json({ message: 'FoodTruck saved successfully' });\n\t\t});\n\t});\n\n\t//READ API ROUTE -- '/v1/foodtruck/'\n\t//this route allows us to read data and get it from the database\n\t//change this according to the model\n\tapi.get('/', (req, res) => {\n\t\t//this with the empty brackets will return all records in the db\n\t\tFoodTruck.find({}, (err, foodtrucks) => {\n\t\t\tif(err) {\n\t\t\t\tres.send(err);\n\t\t\t}\n\t\t\tres.json(foodtrucks);\n\t\t});\n\t});\n\n\t//READ API ROUTE(for individual items) -- '/v1/foodtruck/:id'\n\t//this route allows us to read data and get it from the database\n\t//change this according to the model\n\tapi.get('/:id', (req, res) => {   //the colon tells express that id is a parameter\n\t\t//this with the \"findById\" method will return one record in the db\n\t\tFoodTruck.findById(req.params.id, (err, foodtruck) => {\n\t\t\tif(err) {\n\t\t\t\tres.send(err);\n\t\t\t}\n\t\t\tres.json(foodtruck);\n\t\t});\n\t});\n\n\t//UPDATE API ROUTE(for individual items) -- '/v1/foodtruck/:id'\n\t//this PUT route allows us to pass in an item id. it will first find the item by id, then we can change properties and reseave the data to database\n\t//change this according to the model\n\tapi.put('/:id', (req, res) => {\n\t\t//first we find by item id\n\t\tFoodTruck.findById(req.params.id, (err, foodtruck) => {\n\t\t\tif(err) {\n\t\t\t\tres.send(err);\n\t\t\t}\n\t\t\t//we grab the foodtruck object by its name and set it = to req.body.name\n\t\t\tfoodtruck.name = req.body.name;\n\t\t\tfoodtruck.save(err => {\n\t\t\t\tif (err) {\n\t\t\t\t\tres.send(err);\n\t\t\t\t}\n\t\t\t\tres.json({ message: 'FoodTruck info was updated' });\n\t\t\t});\n\t\t});\n\t});\n\n\t//DELETE API ROUTE -- '/v1/foodtruck/:id'\n\t//this DELETE(remove) route allows us to pass in an item id. and delete if from the database\n\t//change this according to the model\n\tapi.delete('/:id', (req, res) => {\n\t\tFoodTruck.remove({\n\t\t\t_id: req.params.id\n\t\t}, (err, foodtruck) => {\n\t\t\tif(err) {\n\t\t\t\tres.send(err);\n\t\t\t}\n\t\t\tres.json({ message: 'FoodTruck removed' });\n\t\t});\n\t});\n\n\t//CREATE a Review for a specific food truck API ROUTE -- '/v1/foodtruck/reviews/add:id'\n\t//this route allows us to create data,associate it with an id and post it to the database\n\t//change this according to the model\n\tapi.post('/reviews/add/:id', (req, res) => {\n\tFoodTruck.findById(req.params.id, (err, foodtruck) => {\n\t\tif (err) {\n\t\t\tres.send(err);\n\t\t}\n\t\tlet newReview = new Review();\n\n\t\tnewReview.title = req.body.title;\n\t\tnewReview.text = req.body.text;\n\t\tnewReview.foodtruck = foodtruck._id;\n\t\tnewReview.save((err, review) => {\n\t\t\tif (err) {\n\t\t\t\tres.send(err);\n\t\t\t}\n\t\t\tfoodtruck.reviews.push(newReview);\n\t\t\tfoodtruck.save(err => {\n\t\t\t\tif (err) {\n\t\t\t\t\tres.send(err);\n\t\t\t\t}\n\t\t\t\tres.json({ message: 'Food truck review saved' });\n\t\t\t});\n\t\t});\n\t});\n});\n\treturn api;\n}\n"]}